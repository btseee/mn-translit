# 🐍 Build, Test, and Publish Python package to PyPI
# Docs: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'   # Only publish on version tags (e.g., v0.1.0)
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest
      
      - name: Run tests
        run: pytest -v

  publish:
    # Only run publish if tests succeed AND it's a version tag
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write  # Required for creating releases
      id-token: write  # Required for trusted publishing to PyPI
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Building version: $VERSION"

      - name: Update version in pyproject.toml
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          echo "✅ Updated pyproject.toml to version $VERSION"
          grep "^version" pyproject.toml

      - name: Install and build with latest tools
        run: |
          python -m pip install --upgrade pip setuptools wheel build
          python -m build

      - name: Verify package contents
        run: |
          echo "--- Listing files in workspace ---"
          ls -lR
          echo "--- Inspecting the generated wheel ---"
          pip install wheel
          unzip -l dist/*.whl
          WHEEL_FILE=$(ls dist/*.whl)
          echo "--- Contents of METADATA ---"
          unzip -p $WHEEL_FILE *.dist-info/METADATA

      - name: Publish to PyPI with Trusted Publishing 🚀
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verbose: true
        # Fallback to token-based auth if trusted publishing fails
        continue-on-error: true
        id: trusted_publish

      - name: Publish to PyPI with Token (Fallback) �
        if: steps.trusted_publish.outcome == 'failure'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m pip install --upgrade twine
          python -m twine upload --repository pypi dist/* --skip-existing

      - name: Extract release notes
        id: release_notes
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          
          # Extract release notes from README or create default notes
          if [ -f "CHANGELOG.md" ]; then
            # Try to extract notes for this version from CHANGELOG
            NOTES=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d')
            if [ -z "$NOTES" ]; then
              NOTES="Release version $VERSION"
            fi
          else
            NOTES="Release version $VERSION

          ## 📦 Installation
          \`\`\`bash
          pip install mn-translit==$VERSION
          \`\`\`

          ## 📋 Changes
          See the [commit history](https://github.com/btseee/mn-translit/commits/v$VERSION) for details."
          fi
          
          # Save to file for multiline output
          echo "$NOTES" > release_notes.txt

      - name: Create GitHub Release 🎉
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          body_path: release_notes.txt
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
